% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Zagent.R
\name{Agent}
\alias{Agent}
\title{Agent Class for LLM Interactions}
\description{
An R6 class representing an agent that interacts with language models.
Each agent maintains its own memory, persona, and model configuration for
consistent and contextual interactions with a language model.
}
\details{
The `Agent` class enables the creation of agents with defined personas
(e.g., role, ideology, age) and memory (conversation history). The persona
is automatically prepended to prompts sent to the language model, while
memory can be included in prompts via the `{{conversation}}` placeholder.
This allows for personalized and context-aware responses from the LLM.
}
\examples{
\dontrun{
# Define a model configuration for OpenAI's gpt-4o-mini
agentcfg <- llm_config(
  model = "gpt-4o-mini",
  provider = "openai",
  api_key = Sys.getenv("OPENAI_KEY")
)

# Create an agent with a specific persona
analyst_agent <- Agent$new(
  id = "analyst",
  model_config = agentcfg,
  persona = list(
    role = "data analyst",
    experience = "10 years",
    style = "concise"
  )
)

# Generate a response with a specified topic
response <- analyst_agent$respond(
  topic = "data trends",
  prompt_template = "Provide your thoughts on {{topic}} based on your experience."
)

# The resulting prompt sent to the LLM will be:
# "Pretend that you are a \"data analyst\" with the following description: experience = 10 years, style = concise.
# Provide your thoughts on data trends based on your experience."

# Access the response text
print(response$text)

# Generate a response without specifying a topic (uses default)
response_default <- analyst_agent$respond(
  prompt_template = "Discuss the {{topic}}."
)

# The resulting prompt will be:
# "Pretend that you are a \"data analyst\" with the following description: experience = 10 years, style = concise.
# Discuss the conversation with simulated agents."
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{Unique identifier for the agent.}

\item{\code{context_length}}{Maximum number of conversation turns stored in memory.}

\item{\code{model_config}}{Configuration object specifying the LLM to use.}

\item{\code{memory}}{List of speaker/text pairs representing conversation history.}

\item{\code{persona}}{Named list defining the agent's characteristics (e.g., role, traits).}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Agent-new}{\code{Agent$new()}}
\item \href{#method-Agent-add_memory}{\code{Agent$add_memory()}}
\item \href{#method-Agent-generate_prompt}{\code{Agent$generate_prompt()}}
\item \href{#method-Agent-call_llm_agent}{\code{Agent$call_llm_agent()}}
\item \href{#method-Agent-generate}{\code{Agent$generate()}}
\item \href{#method-Agent-respond}{\code{Agent$respond()}}
\item \href{#method-Agent-reset_memory}{\code{Agent$reset_memory()}}
\item \href{#method-Agent-clone}{\code{Agent$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Agent-new"></a>}}
\if{latex}{\out{\hypertarget{method-Agent-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Agent instance.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Agent$new(id, context_length = 5, persona = NULL, model_config)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{Character. Unique identifier for the agent.}

\item{\code{context_length}}{Numeric. Maximum number of conversation turns to retain (default 5).}

\item{\code{persona}}{Named list. Characteristics defining the agent’s persona (optional).}

\item{\code{model_config}}{Object of class `llm_config`. Specifies LLM settings.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Agent-add_memory"></a>}}
\if{latex}{\out{\hypertarget{method-Agent-add_memory}{}}}
\subsection{Method \code{add_memory()}}{
Add a message to the agent’s memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Agent$add_memory(speaker, text)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{speaker}}{Character. Identifier of the speaker.}

\item{\code{text}}{Character. Content of the message.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Agent-generate_prompt"></a>}}
\if{latex}{\out{\hypertarget{method-Agent-generate_prompt}{}}}
\subsection{Method \code{generate_prompt()}}{
Substitute placeholders in a prompt template with provided values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Agent$generate_prompt(template, replacements = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{template}}{Character. Prompt template containing placeholders like `{{name}}`.}

\item{\code{replacements}}{Named list. Values to replace placeholders.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Character. The prompt with all placeholders substituted.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Agent-call_llm_agent"></a>}}
\if{latex}{\out{\hypertarget{method-Agent-call_llm_agent}{}}}
\subsection{Method \code{call_llm_agent()}}{
Send a prompt to the configured LLM and retrieve the response.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Agent$call_llm_agent(prompt, verbose = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prompt}}{Character. The complete prompt to send to the LLM.}

\item{\code{verbose}}{Logical. If TRUE, prints additional details (default FALSE).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List. Contains `$text` (LLM response), `$tokens_sent`, `$tokens_received`, and `$full_response`.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Agent-generate"></a>}}
\if{latex}{\out{\hypertarget{method-Agent-generate}{}}}
\subsection{Method \code{generate()}}{
Generate an LLM response using a prompt template and optional replacements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Agent$generate(prompt_template, replacements = list(), verbose = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prompt_template}}{Character. Template for the prompt with placeholders.}

\item{\code{replacements}}{Named list. Values to substitute into the prompt template.}

\item{\code{verbose}}{Logical. If TRUE, prints additional details (default FALSE).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List. Contains `$text`, `$tokens_sent`, `$tokens_received`, and `$full_response`.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Agent-respond"></a>}}
\if{latex}{\out{\hypertarget{method-Agent-respond}{}}}
\subsection{Method \code{respond()}}{
Generate a response from the agent about a topic, incorporating its persona.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Agent$respond(
  topic = "conversation with simulated agents",
  prompt_template,
  replacements = list(),
  verbose = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{topic}}{Character. Subject or question for the agent to address. If not provided, defaults to "conversation with simulated agents".}

\item{\code{prompt_template}}{Character. Template for the prompt with placeholders.}

\item{\code{replacements}}{Named list. Additional placeholder values (optional).}

\item{\code{verbose}}{Logical. If TRUE, prints additional details (default FALSE).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List. Contains `$text`, `$tokens_sent`, `$tokens_received`, and `$full_response`.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Agent-reset_memory"></a>}}
\if{latex}{\out{\hypertarget{method-Agent-reset_memory}{}}}
\subsection{Method \code{reset_memory()}}{
Clear the agent’s conversation memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Agent$reset_memory()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Agent-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Agent-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Agent$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
